openapi: 3.0.1
info:
  title: Products Service API
  description: Microservicio para gestion de Productos
  version: 1.0.0

servers:
  - url: http://localhost:8085/api/v1
    description: Servidor de desarrollo

tags:
  - name: products
    description: Operaciones relacionadas con productos

paths:
  /products:
    post:
      tags: [products]
      summary: Crear un nuevo producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Error de validaci칩n
        '500':
          description: Error interno del servidor

    get:
      tags: [products]
      summary: Obtener todos los productos
      responses:
        '200':
          description: Lista de Productos obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /products/{id}:
    get:
      tags: [products]
      summary: Obtener un Producto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Producto no encontrado

    put:
      tags: [products]
      summary: Actualizar un Producto existente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Error de validaci칩n o ID duplicado
        '404':
          description: Producto no encontrado

    delete:
      tags: [products]
      summary: Eliminar un producto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Producto eliminado exitosamente
        '400':
          description: No se puede eliminar - Producto no existente
        '404':
          description: Producto no encontrado

  /products/{idProduct}/add-stock:
    put:
      tags: [products]
      summary: Agregar m치s stock a un producto
      parameters:
        - name: idProduct
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  example: 10
      responses:
        '200':
          description: Stock actualizado exitosamente
        '400':
          description: Stock no actualizado
        '404':
          description: Producto no encontrado

components:
  schemas:
    ProductRequest:
      type: object
      required:
        - name
        - price
        - stock
        - registeredDate
      properties:
        name:
          type: string
          maxLength: 100
          example: Arroz
        stock:
          type: integer
          example: 12
        price:
          type: number
          format: float
          example: 20.50
        registeredDate:
          type: string
          format: date
          example: "2023-10-15"

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Arroz
        stock:
          type: integer
          example: 12
        price:
          type: number
          format: float
          example: 12.50
        registeredDate:
          type: string
          format: date
          example: "2023-10-15"

  responses:
    ValidationError:
      description: Error de validaci칩n
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "El campo de stock debe ser mayor a 0"

    ProductNotFound:
      description: Producto no encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Producto no encontrado"
